// Root rule for the language
program ::= namespace_declaration | declaration* ;

// Declarations
declaration ::= namespace_declaration
              | class_declaration 
              | enum_declaration 
              | union_declaration 
              | interface_declaration 
              | type_declaration 
              | macro_declaration
              ;

access_modifier ::= Public | Private | Protected ;

// Classes
class_declaration ::= attribute* access_modifier (Abstract | Sealed)? Class Identifier (generic | compile_generic)? inheritance? CurlyLeft class_body CurlyRight ;
class_body ::= (field_declaration | property_declaration | method_definition | method_declaration | constructor_declaration)* ;
field_declaration ::= attribute* access_modifier type_expression Identifier (Equals expression)? Semicolon ;
property_declaration ::= attribute* type_expression Identifier CurlyLeft property_getter_setter (Comma property_getter_setter)? Comma? CurlyRight 
property_getter_setter ::= attribute* access_modifier (Get | Set) (Equal expression)?
constructor_declaration ::= attribute* access_modifier Identifier ParenLeft constructor_param_list? ParenRight CurlyLeft function_body CurlyRight ;
constructor_param_list ::= constructor_param (Comma constructor_param)* Comma? ;
constructor_param ::= attribute* (This | type_expression) Identifier ;
method_definition ::= attribute* access_modifier StackAlloc type_expression Identifier ParenLeft param_list? ParenRight CurlyLeft function_body CurlyRight ;
method_declaration ::= attribute* access_modifier StackAlloc type_expression Identifier ParenLeft param_list? ParenRight Semicolon ;
inheritance ::= Colon type_expr_list?

// Enums
enum_declaration ::= attribute* access_modifier Enum Identifier ParenLeft param_list? ParenRight inheritance? CurlyLeft enum_body CurlyRight;
enum_body ::= (enum_case | method_definition)* ;
enum_case ::= Identifier (ParenLeft expr_list? ParenRight)? Semicolon ;

// Unions
union_declaration ::= attribute* access_modifier Macro? Union Identifier (generic | compile_generic)? inheritance? CurlyLeft union_body CurlyRight ;
union_body ::= (union_case | method_definition)* ;
union_case ::= Identifier ParenLeft param_list? ParenRight Semicolon ;

// Interfaces
interface_declaration ::= attribute* access_modifier Interface Identifier (generic | compile_generic)? inheritance? CurlyLeft interface_body CurlyRight ;
interface_body ::= (method_declaration | method_definition | property_declaration)* ;

// Types
type_declaration ::= attribute* Type Identifier Equals type_expression Semicolon ;
type_expression ::= nested_ident (generic | compile_generic)? ;
type_expr_list ::= type_expression (Comma type_expression)* Comma? ;
generic ::= LessThan (Identifier (Comma Identifier)*)? GreaterThan ;
compile_generic ::= LessThan SquareLeft param_list SquareRight GreaterThan ;

// Functions
function_body ::= statement* ;
param_list ::= parameter (Comma parameter)* Comma? ;
parameter ::= type_expression Identifier ;
statement ::= variable_declaration | expression_statement | return_statement ;
variable_declaration ::= type_expression Identifier (Equals expression)? Semicolon ;
expression_statement ::= expression Semicolon ;
return_statement ::= Return expression Semicolon ;

// Expressions
expr_list ::= expression (Comma expression)* Comma? ;
expression ::= logical_or ;

block_expr ::= CurlyLeft statement* CurlyRight ;
if_expr ::= If expression CurlyLeft statement* CurlyRight (If Else expression CurlyLeft statement* CurlyRight)* (Else CurlyLeft statement* CurlyRight)? ;
match_expr ::= Match Identifier CurlyLeft MatchCaseList CurlyRight ;
MatchCaseList ::= MatchCase (Comma MatchCase)* Comma? ;
MatchCase ::= ParenLeft MatchParams? ParenRight Arrow block_expr ;
MatchParams ::= MatchParam (Comma MatchParam)* Comma? ;
MatchParam ::= Underscore | expression ;

logical_or ::= logical_and (Or logical_and)* ;
logical_and ::= equality_expr (And equality_expr)* ;
equality_expr ::= relational_expr (Equality relational_expr | NotEqual relational_expr)* ;
relational_expr ::= additive_expr (GreaterThan additive_expr 
                                            | LessThan additive_expr 
                                            | GreaterThanEquality additive_expr 
                                            | LessThanEquality additive_expr)* ;

additive_expr ::= multiplicative_expr (Plus multiplicative_expr | Minus multiplicative_expr)* ;
multiplicative_expr ::= unary_expr (Star unary_expr | Slash unary_expr | Percent unary_expr)* ;
unary_expr ::= (Bang | Minus | Plus)* primary_expr ;
primary_expr ::= ParenLeft expression ParenRight
                    | block_expr 
                    | if_expr 
                    | match_expr 
                    | function_call_expr 
                    | macro_call_expr
                    | LiteralNumber
                    | LiteralString
                    | LiteralBool
                    | nested_ident
                    | This
                    | CodeBlock
                    ;
                    
function_call_expr ::= nested_ident ParenLeft expr_list? ParenRight ;
macro_call_expr ::= At nested_ident ParenLeft expr_list? ParenRight ;

// Identifiers
namespace_declaration ::= Namespace nested_ident Semicolon declaration*;
nested_ident ::= (nested_ident Dot)? Ident ;

// Macros
macro_declaration ::= Macro Identifier ParenLeft param_list? ParenRight CurlyLeft function_body CurlyRight ;

// attribute 
attribute ::= SquareLeft attribute_list SquareRight ;
attribute_list ::= attribute_body (Comma attribute_body)? Comma? ;
attribute_body ::= nested_ident (ParenLeft param_list? ParenRight)? ;